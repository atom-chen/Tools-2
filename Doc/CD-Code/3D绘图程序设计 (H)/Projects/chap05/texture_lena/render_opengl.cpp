#include <windows.h>
// Standard OpenGL header
#include <GL/gl.h>
#include <GL/GLAux.h>

#include "Gut.h"
#include "render_data.h"

static Matrix4x4 g_view_matrix;
GLuint g_TextureID = 0;

bool InitResourceOpenGL(void)
{
	// `计算出一个可以转换到镜头坐标系的矩阵`
	g_view_matrix = GutMatrixLookAtRH(g_eye, g_lookat, g_up);
	// `设置投影矩阵`
	Matrix4x4 projection_matrix = GutMatrixPerspectiveRH_OpenGL(g_fFovW, 1.0f, 0.1f, 100.0f);
	glMatrixMode(GL_PROJECTION);
	glLoadMatrixf( (float *) &projection_matrix);

	// `载入贴图`
	AUX_RGBImageRec *pTextureImage = auxDIBImageLoad( "../../textures/lena.bmp" );
	if ( pTextureImage==NULL )
		return false;
	for ( int i=0; i<4; i++ )
	{
		g_Quad[i].m_Texcoord[1] = 1.0f - g_Quad[i].m_Texcoord[1];
	}
	// `生成一个贴图对象`
	glGenTextures( 1, &g_TextureID );
	// `使用g_TextureID贴图对象`
	glBindTexture( GL_TEXTURE_2D, g_TextureID );
	// `拷贝贴图数据`
	glTexImage2D( GL_TEXTURE_2D, 0, GL_RGB8, 
		pTextureImage->sizeX, pTextureImage->sizeY, 0,
		GL_RGB, GL_UNSIGNED_BYTE, pTextureImage->data );
	// `设置显示贴图被缩小时使用线性内插 `
	glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER, GL_LINEAR );
	// `设置显示贴图被放大时使用线性外插 `
	glTexParameteri( GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER, GL_LINEAR );

	// `拷贝完贴图后, 就可以把原始数据消去.`
	if( pTextureImage->data )
		free( pTextureImage->data );

	free( pTextureImage );

	// `使用2D贴图功能`
	glEnable(GL_TEXTURE_2D);

	return true;
}

bool ReleaseResourceOpenGL(void)
{
	if ( g_TextureID )
	{
		glDeleteTextures(1, &g_TextureID);
		g_TextureID = 0;
	}
	return true;
}

// callback function. 窗口大小改变时会被调用, 并传入新的窗口大小.
void ResizeWindowOpenGL(int width, int height)
{
	// 使用新的窗口大小做为新的绘图分辨率
	glViewport(0, 0, width, height);
	// 投影矩阵, 重设水平和垂直方向的视角.
	float aspect = (float) height / (float) width;
	Matrix4x4 projection_matrix = GutMatrixPerspectiveRH_OpenGL(g_fFovW, aspect, 0.1f, 100.0f);
	// 设置视角转换矩阵
	glMatrixMode(GL_PROJECTION);
	glLoadMatrixf( (float *) &projection_matrix);
}

// 使用OpenGL来绘图
void RenderFrameOpenGL(void)
{
	// 清除画面
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glEnable(GL_DEPTH_TEST);
	// 把正向和反向的面都画出来
	glDisable(GL_CULL_FACE);
	// 设置要用数组的方式传入顶点位置和颜色
	glEnableClientState(GL_VERTEX_ARRAY);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	glVertexPointer(3, GL_FLOAT, sizeof(Vertex_VT), &g_Quad[0].m_Position);
	glTexCoordPointer(2, GL_FLOAT, sizeof(Vertex_VT), &g_Quad[0].m_Texcoord);
	// 计算出一个可以转换到镜头坐标系的矩阵
	Matrix4x4 view_matrix = GutMatrixLookAtRH(g_eye, g_lookat, g_up);
	Matrix4x4 world_view_matrix = g_world_matrix * view_matrix;
	glMatrixMode(GL_MODELVIEW);
	glLoadMatrixf( (float *) &world_view_matrix);
	// 画出格子
	glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);
	// 把背景backbuffer的画面显示出来
	GutSwapBuffersOpenGL();
}
