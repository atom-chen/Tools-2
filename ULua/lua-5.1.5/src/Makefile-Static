SHELL = /bin/sh

LIB_DIR = ./
BIN_DIR = ./
OBJECT_DIR = ./
SRC_DIR = ./

#$(shell mkdir -p ${LIB_DIR})
#$(shell mkdir -p ${BIN_DIR})
#$(shell mkdir -p ${OBJECT_DIR})

RM = rm -fr

CC = gcc
CPPC = g++
AR = ar -rc
CFLAGS = -m64 -O2 -W -Wall -c
CPPFLAGS = -m64 -O2 -c
CFLAGS_DEBUG = -m64 -O2 -W -Wall -c -g

SRC_FILES = $(SRC_DIR)lapi.c $(SRC_DIR)lauxlib.c $(SRC_DIR)lbaselib.c $(SRC_DIR)lcode.c $(SRC_DIR)ldblib.c $(SRC_DIR)ldebug.c $(SRC_DIR)ldo.c $(SRC_DIR)ldump.c $(SRC_DIR)lfunc.c $(SRC_DIR)lgc.c $(SRC_DIR)linit.c $(SRC_DIR)liolib.c $(SRC_DIR)llex.c $(SRC_DIR)lmathlib.c $(SRC_DIR)lmem.c $(SRC_DIR)loadlib.c $(SRC_DIR)lobject.c $(SRC_DIR)lopcodes.c $(SRC_DIR)loslib.c $(SRC_DIR)lparser.c $(SRC_DIR)lstate.c $(SRC_DIR)lstring.c $(SRC_DIR)lstrlib.c $(SRC_DIR)ltable.c $(SRC_DIR)ltablib.c $(SRC_DIR)ltm.c $(SRC_DIR)lundump.c $(SRC_DIR)lvm.c $(SRC_DIR)lzio.c $(SRC_DIR)print.c

HEAD_FILES = $(SRC_DIR)lapi.h $(SRC_DIR)lauxlib.h $(SRC_DIR)lcode.h $(SRC_DIR)ldebug.h $(SRC_DIR)ldo.h $(SRC_DIR)lfunc.h $(SRC_DIR)lgc.h $(SRC_DIR)llex.h $(SRC_DIR)llimits.h $(SRC_DIR)lmem.h $(SRC_DIR)lobject.h $(SRC_DIR)lopcodes.h $(SRC_DIR)lparser.h $(SRC_DIR)lstate.h $(SRC_DIR)lstring.h $(SRC_DIR)ltable.h $(SRC_DIR)ltm.h $(SRC_DIR)lua.h $(SRC_DIR)luaconf.h $(SRC_DIR)lualib.h $(SRC_DIR)lundump.h $(SRC_DIR)lvm.h $(SRC_DIR)lzio.h

OBJECT_FILES = lapi.o lauxlib.o lbaselib.o lcode.o ldblib.o ldebug.o ldo.o ldump.o lfunc.o lgc.o linit.o liolib.o llex.o lmathlib.o lmem.o loadlib.o lobject.o lopcodes.o loslib.o lparser.o lstate.o lstring.o lstrlib.o ltable.o ltablib.o ltm.o lundump.o lvm.o lzio.o print.o

LIB_OBJECT = liblua.a
LIB_NAME = lua

LUA_SRC_FILES = $(SRC_DIR)lua.c
LUA_OBJECT=lua.o
LUA_BIN_OBJECT = lua.exe

LUAC_SRC_FILES = $(SRC_DIR)luac.c
LUAC_OBJECT=luac.o
LUAC_BIN_OBJECT = luac.exe

.PHONY:all

all:$(LIB_OBJECT) $(LUA_BIN_OBJECT) $(LUAC_BIN_OBJECT)

$(LIB_OBJECT):$(OBJECT_FILES)
	$(AR) $(LIB_OBJECT) $(OBJECT_FILES)
ifneq ($(SRC_DIR), $(LIB_DIR))
	mv $(LIB_OBJECT) $(LIB_DIR)
endif

$(OBJECT_FILES):$(SRC_FILES) $(HEAD_FILES)
	$(CC) $(CFLAGS) $(SRC_FILES) -I./

$(LUA_BIN_OBJECT):$(LUA_OBJECT)
	$(CC) -o $(LUA_BIN_OBJECT) $(OBJECT_DIR)$(LUA_OBJECT) -I./ -L$(LIB_DIR) -l$(LIB_NAME)
ifneq ($(SRC_DIR), $(BIN_DIR))
	mv $(LUA_BIN_OBJECT) $(BIN_DIR)
endif
		
$(LUA_OBJECT):$(LUA_SRC_FILES)
	$(CC) $(CFLAGS) $(LUA_SRC_FILES) -o $(LUA_OBJECT) -I./ -L$(LIB_DIR) -l$(LIB_NAME)
ifneq ($(SRC_DIR), $(OBJECT_DIR))
	mv $(OBJECT_FILES) $(LUA_OBJECT) $(OBJECT_DIR)
endif
	
$(LUAC_BIN_OBJECT):$(LUAC_OBJECT)
	$(CC) -o $(LUAC_BIN_OBJECT) $(OBJECT_DIR)$(LUAC_OBJECT) -I./ -L$(LIB_DIR) -l$(LIB_NAME)
ifneq ($(SRC_DIR), $(BIN_DIR))
	mv $(LUAC_BIN_OBJECT) $(BIN_DIR)
endif
		
$(LUAC_OBJECT):$(LUAC_SRC_FILES)
	$(CC) $(CFLAGS) $(LUAC_SRC_FILES) -o $(LUAC_OBJECT) -I./ -L$(LIB_DIR) -l$(LIB_NAME)
ifneq ($(SRC_DIR), $(OBJECT_DIR))
	#mv $(OBJECT_FILES) $(LUAC_OBJECT) $(OBJECT_DIR)
endif

clean:
	#$(RM) $(LIB_DIR) $(BIN_DIR) $(OBJECT_DIR)
	$(RM) *.a *.o *.exe *.dll
ifneq ($(SRC_DIR), $(LIB_DIR))
	$(RM) $(LIB_DIR)
endif
ifneq ($(SRC_DIR), $(BIN_DIR))
	$(RM) $(BIN_DIR)
endif
ifneq ($(SRC_DIR), $(OBJECT_DIR))
	$(RM) $(OBJECT_DIR)
endif